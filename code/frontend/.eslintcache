[{"C:\\Users\\ΔΗΜΗΤΡΗΣ\\Documents\\GitHubs\\Deep-Otolith\\code\\frontend\\src\\index.js":"1","C:\\Users\\ΔΗΜΗΤΡΗΣ\\Documents\\GitHubs\\Deep-Otolith\\code\\frontend\\src\\App.js":"2","C:\\Users\\ΔΗΜΗΤΡΗΣ\\Documents\\GitHubs\\Deep-Otolith\\code\\frontend\\src\\reportWebVitals.js":"3","C:\\Users\\ΔΗΜΗΤΡΗΣ\\Documents\\GitHubs\\Deep-Otolith\\code\\frontend\\src\\constants.js":"4","C:\\Users\\ΔΗΜΗΤΡΗΣ\\Documents\\GitHubs\\Deep-Otolith\\code\\frontend\\src\\services\\fishType.js":"5"},{"size":517,"mtime":1637678626881,"results":"6","hashOfConfig":"7"},{"size":6682,"mtime":1642085482731,"results":"8","hashOfConfig":"7"},{"size":375,"mtime":1637678626881,"results":"9","hashOfConfig":"7"},{"size":54,"mtime":1638029493230,"results":"10","hashOfConfig":"7"},{"size":198,"mtime":1638024726415,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ewj8kh",{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"C:\\Users\\ΔΗΜΗΤΡΗΣ\\Documents\\GitHubs\\Deep-Otolith\\code\\frontend\\src\\index.js",[],"C:\\Users\\ΔΗΜΗΤΡΗΣ\\Documents\\GitHubs\\Deep-Otolith\\code\\frontend\\src\\App.js",["24","25","26","27","28","29","30","31","32","33"],"import React, { useState, useEffect } from 'react';\r\nimport 'react-dropzone-uploader/dist/styles.css';\r\nimport './App.css';\r\nimport Dropzone from 'react-dropzone-uploader';\r\nimport { getFishType } from './services/fishType';\r\nimport { API_URL } from './constants';\r\nimport {\r\n  XYPlot,\r\n  XAxis,\r\n  YAxis,\r\n  VerticalGridLines,\r\n  HorizontalGridLines,\r\n  VerticalBarSeries,\r\n} from 'react-vis';\r\n\r\nlet { xhrResponseSum } = '';\r\n\r\n// preview component\r\nconst Preview = ({ meta, fileWithMeta }) => {\r\n  const { name, percent, status, previewUrl } = meta;\r\n  const { xhr } = fileWithMeta;\r\n\r\n  return (\r\n    <div className=\"preview-box\">\r\n        <div className=\"preview-image\">\r\n            {previewUrl && <img width={200} src={previewUrl} alt={name} title={name} />}\r\n            <span className=\"name\">{name}</span>\r\n        </div>\r\n        <div className=\"preview-progress\">\r\n            {status !== \"done\" && <progress max={100} value={status === 'done' || status === 'headers_received' ? 100 : percent} />}\r\n            {status !== \"done\" && <span className=\"status\">{status}</span>}\r\n        </div>\r\n        <div className=\"preview-plot\">\r\n            {status === \"done\" && <XYPlot xType=\"ordinal\" width={500} height={220} yDomain={[0, 1]} xDistance={10} style={{backgroundColor: '#ffffff'}}>\r\n            <XAxis title=\"Age\" tickLabelAngle={-0} style={{text: {fontSize: 12}, }} />\r\n            <YAxis title=\"Probability\"/>\r\n            <VerticalGridLines />\r\n            <HorizontalGridLines style={{stroke: '#B7E9ED'}} />\r\n            <VerticalBarSeries data={xhr.response ? JSON.parse(xhr.response) : null} />\r\n        </XYPlot>}\r\n        </div>\r\n\t\t{status !== \"done\" && <h3>{xhrResponseSum = ''}</h3>}\r\n\t\t{status === \"done\" && !xhrResponseSum.includes(xhr.response) && <div class=\"jsonContentDiv\" style={{display: \"none\"}}>{'{'}{xhrResponseSum += ((xhrResponseSum) ? ',' : '') + JSON.stringify(name.replace(/\\.[^/.]+$/, \"\")) + ': ' + xhr.responseText}{'}'}</div>}\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction App() {\r\n    const [fishType, setFishType] = useState(\"\");\r\n\r\n    const [fishTypes, setFishTypes] = useState([]);\r\n    useEffect(() => {\r\n        getFishType()\r\n        .then(data => {\r\n            setFishTypes(data.items);\r\n        })\r\n        .then(() => {\r\n            // /setFishType(fishTypes[0].model);\r\n        });\r\n    }, []);\r\n\r\n    // specify upload params and API url to file upload\r\n    const getUploadParams = ({ file }) => {\r\n        const body = new FormData();\r\n        body.append('images', file);\r\n        body.append('fishType', fishType);\r\n        return { url: /*API_URL +*/ '/predict', body }\r\n    }\r\n\r\n\tconst downloadJsonFile = () => {\r\n\t\tconst btnJson = document.createElement(\"a\");\r\n\t\tconst getLastElemIndex = document.getElementsByClassName('jsonContentDiv').length - 1;\r\n\t\tconst jsonFile = new Blob([document.getElementsByClassName('jsonContentDiv')[getLastElemIndex].innerHTML], {type: 'application/json'});\r\n\t\tbtnJson.href = URL.createObjectURL(jsonFile);\r\n\t\tbtnJson.download = \"export.json\";\r\n\t\tdocument.body.appendChild(btnJson); // Required for this to work in FireFox\r\n\t\tbtnJson.click();\r\n\t}\r\n\t\r\n\tconst downloadCsvFile = () => {\r\n\t\tconst btnCsv = document.createElement(\"a\");\r\n\t\tconst getLastElemIndex = document.getElementsByClassName('jsonContentDiv').length - 1;\r\n\t\t\r\n\t\tlet jsonStr = '';\r\n\t\tjsonStr = document.getElementsByClassName('jsonContentDiv')[getLastElemIndex].innerHTML;\r\n\t\t\r\n        const json = JSON.parse(jsonStr);\r\n        \r\n\t\tlet num = 0;  \r\n\t\tfor (const fishName in json) {\r\n\t\t  var fishSize = json[fishName]; \t\r\n\t\t  for (let k = 0; k < 2; k++) {\r\n\t\t    num = parseInt(fishSize.length);\r\n\t\t  }\r\n\t\t}\r\n\t\t\t\t\r\n\t\t// add header\r\n\t\t//let csvStr = 'Image/Age-groups' + ', ' + '0' + ', ' + '1' + ', ' + '2' + ', ' + '3' + ', ' + '4' + ', ' + '5+' + '\\r\\n';\r\n\t\r\n        let csvStr = 'Image/Age-group-probabilities';\r\n\t\tif (num == 6){\r\n\t\t\tfor (let j = 0; j < num; j++) {\r\n              csvStr +=  ' ' + 'Age-' + j;\r\n            }\r\n\t\t} else {\r\n\t\t\tfor (let j = 1; j <= num; j++) {\r\n              csvStr +=  ' ' + 'Age-' + j;\r\n            }   \r\n\t\t}\r\n\t\tcsvStr += ' ' + 'Age-prediction' + '\\r\\n';\r\n\t\t\r\n\t\tlet index = {}\r\n        for (const fishName in json) {\r\n\t\t  let max_value = 0\r\n          var fishAgeProbabilities = json[fishName];\r\n          let str = fishName + ' ';\r\n          for (let i = 0; i < fishAgeProbabilities.length; i++) {\r\n            str += parseFloat(fishAgeProbabilities[i].y).toFixed(2);\r\n\r\n\t\t\tif (parseFloat(fishAgeProbabilities[i].y).toFixed(4) > max_value) {\r\n\t\t\t  max_value = parseFloat(fishAgeProbabilities[i].y).toFixed(4)\r\n\t\t\t  index = parseInt(i);\r\n\t\t\t}\r\n            if (i < fishAgeProbabilities.length) {\r\n              str +=  ' ';\r\n            }\r\n          }\r\n\t\t  \r\n\t\t  if (num != 6) {index += 1}\r\n\t\t  str += index\r\n          csvStr += str + '\\r\\n';\r\n        }\r\n        const csvFile = new Blob([csvStr], {type: 'text/csv'});\r\n\t\tbtnCsv.href = URL.createObjectURL(csvFile);\r\n\t\tbtnCsv.download = \"export.csv\";\r\n\t\tdocument.body.appendChild(btnCsv); // Required for this to work in FireFox\r\n\t\tbtnCsv.click();\r\n\t}\r\n\t  \r\n\tfunction refreshPage() {\r\n        window.location.reload();\r\n    }  \r\n  \r\n    const [isOpen, setIsOpen] = useState(false);\r\n      \r\n    return (\r\n    <div className=\"App\">\r\n          \r\n      <h3>1. Select Fish Type</h3>\r\n      <div className=\"fish-type-selector\">\r\n          {fishTypes.map(f => (\r\n        <div className=\"form-check form-check-inline\">\r\n          <label className=\"form-check-label\">\r\n          {f.description}\r\n          <input\r\n            type=\"radio\"\r\n            name=\"fishType\"\r\n            className=\"form-check-input\"\r\n            key={f.model}\r\n            value={f.model}\r\n            checked={fishType === f.model}\r\n            onChange={e => setFishType(e.currentTarget.value)}\r\n          />\r\n          </label>\r\n        </div>\r\n      ))}\r\n      </div>\r\n      <h3>2. Drop or Choose Otolith Images (.jpg or .png, max = 30 per minute)</h3>\r\n      <div classeName=\"file-dropzone\">\r\n        {fishType && <Dropzone\r\n          getUploadParams={getUploadParams}\r\n          maxFiles={30}\r\n          timeout={60000}\r\n          styles={{\r\n            dropzone: { overflow: 'auto', height: '350px', border: '1px solid #999', background: '#f5f5f5' },\r\n            inputLabelWithFiles: { margin: '20px 3%' }\r\n          }}\r\n          canRemove={false}\r\n          PreviewComponent={Preview}\r\n          accept=\"image/*,\"\r\n        />\r\n        }\r\n      </div>\r\n\t  <div>\r\n         <button onClick={downloadCsvFile}>Export to CSV</button>&nbsp;\r\n         <button onClick={ refreshPage }>Refresh page</button>\t\r\n      </div>\r\n     \r\n      \r\n    </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\ΔΗΜΗΤΡΗΣ\\Documents\\GitHubs\\Deep-Otolith\\code\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\ΔΗΜΗΤΡΗΣ\\Documents\\GitHubs\\Deep-Otolith\\code\\frontend\\src\\constants.js",[],"C:\\Users\\ΔΗΜΗΤΡΗΣ\\Documents\\GitHubs\\Deep-Otolith\\code\\frontend\\src\\services\\fishType.js",["34"],"import { API_URL } from '../constants';\r\n\r\nexport function getFishType() {\r\n  return fetch(/*API_URL +*/ '/fishtype')\r\n    .then(data => data.json())\r\n    //.catch(error => console.log(error));\r\n}\r\n",{"ruleId":"35","severity":1,"message":"36","line":6,"column":10,"nodeType":"37","messageId":"38","endLine":6,"endColumn":17},{"ruleId":"35","severity":1,"message":"39","line":70,"column":8,"nodeType":"37","messageId":"38","endLine":70,"endColumn":24},{"ruleId":"40","severity":1,"message":"41","line":101,"column":11,"nodeType":"42","messageId":"43","endLine":101,"endColumn":13},{"ruleId":"44","severity":1,"message":"45","line":103,"column":30,"nodeType":"42","messageId":"46","endLine":103,"endColumn":31},{"ruleId":"44","severity":1,"message":"45","line":107,"column":30,"nodeType":"42","messageId":"46","endLine":107,"endColumn":31},{"ruleId":"44","severity":1,"message":"45","line":110,"column":17,"nodeType":"42","messageId":"46","endLine":110,"endColumn":18},{"ruleId":"44","severity":1,"message":"45","line":110,"column":36,"nodeType":"42","messageId":"46","endLine":110,"endColumn":37},{"ruleId":"40","severity":1,"message":"47","line":129,"column":13,"nodeType":"42","messageId":"43","endLine":129,"endColumn":15},{"ruleId":"35","severity":1,"message":"48","line":144,"column":12,"nodeType":"37","messageId":"38","endLine":144,"endColumn":18},{"ruleId":"35","severity":1,"message":"49","line":144,"column":20,"nodeType":"37","messageId":"38","endLine":144,"endColumn":29},{"ruleId":"35","severity":1,"message":"36","line":1,"column":10,"nodeType":"37","messageId":"38","endLine":1,"endColumn":17},"no-unused-vars","'API_URL' is defined but never used.","Identifier","unusedVar","'downloadJsonFile' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","Expected '!==' and instead saw '!='.","'isOpen' is assigned a value but never used.","'setIsOpen' is assigned a value but never used."]